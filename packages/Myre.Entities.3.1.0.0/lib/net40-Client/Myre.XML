<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Myre</name>
    </assembly>
    <members>
        <member name="T:Myre.ActionDisposable">
            <summary>
            A disposable object which calls an action when it is disposed
            </summary>
        </member>
        <member name="T:Myre.IDisposableObject">
            <summary>
            An object that can report whether or not it is disposed.
            </summary>
        </member>
        <member name="P:Myre.IDisposableObject.IsDisposed">
            <summary>
            Gets a value indicating whether this instance is disposed.
            </summary>
        </member>
        <member name="M:Myre.ActionDisposable.#ctor(System.Boolean)">
            <summary>
            
            </summary>
            <param name="allowRepeats"></param>
        </member>
        <member name="M:Myre.ActionDisposable.Dispose">
            <summary>
            Call all registered actions
            </summary>
        </member>
        <member name="M:Myre.ActionDisposable.AddAction(System.Action)">
            <summary>
            
            </summary>
            <param name="a"></param>
        </member>
        <member name="P:Myre.ActionDisposable.IsDisposed">
            <summary>
            Indicates if Dispose has been called
            </summary>
        </member>
        <member name="T:Myre.Assert">
            <summary>
            Helpers for asserting requirements
            </summary>
        </member>
        <member name="M:Myre.Assert.IsTrue(System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="message"></param>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Myre.Assert.ArgumentNotNull(System.String,System.Object)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Myre.Assert.ArgumentInRange``1(System.String,``0,``0,``0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="min"></param>
            <param name="max"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Myre.Assert.ArgumentGreaterThan``1(System.String,``0,``0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="min"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Myre.Assert.ArgumentLessThan``1(System.String,``0,``0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="max"></param>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Myre.Collections.IBox">
            <summary>
            A reference to a value
            </summary>
        </member>
        <member name="P:Myre.Collections.IBox.Value">
            <summary>
            The value of this box
            </summary>
        </member>
        <member name="P:Myre.Collections.IBox.Type">
            <summary>
            The type of the value of this box
            </summary>
        </member>
        <member name="T:Myre.Collections.BaseBox`1">
            <summary>
            An object which contains a value
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Myre.Collections.BaseBox`1.Value">
            <summary>
            The value this box contains.
            </summary>
        </member>
        <member name="P:Myre.Collections.BaseBox`1.Myre#Collections#IBox#Value">
            <summary>
            Gets or sets the value this box contains.
            </summary>
            <value>The value this box contains.</value>
        </member>
        <member name="P:Myre.Collections.BaseBox`1.Type">
            <summary>
            The type of the value in this box
            </summary>
        </member>
        <member name="E:Myre.Collections.BaseBox`1.BoxChanged">
            <summary>
            An event which is triggered whenever the value in this box changes. Args are The box, the old value, and the new value.
            </summary>
        </member>
        <member name="T:Myre.Collections.Box`1">
            <summary>
            A class which boxes a value.
            </summary>
            <typeparam name="T">The type of the value to box.</typeparam>
        </member>
        <member name="P:Myre.Collections.Box`1.Value">
            <summary>
            The value this box contains.
            </summary>
        </member>
        <member name="T:Myre.Collections.BoxedValueStore`1">
            <summary>
            A dictionary, mapping keys to boxed values.
            </summary>
            <typeparam name="Key">The type of the Key.</typeparam>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.BoxedValueStore`1"/> class.
            </summary>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.Contains(`0)">
            <summary>
            Determines whether a value exists at the specified key.
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if [contains] [the specified key]; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.TryGet``1(`0,Myre.Collections.Box{``0}@)">
            <summary>
            Tries the value at the sspecified key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.Get``1(`0,``0,System.Boolean)">
            <summary>
            Gets the value at the specified key.
            </summary>
            <typeparam name="T">The type of value stored at the key.</typeparam>
            <param name="key">The key.</param>
            <param name="defaultValue">The default value.</param>
            <param name="create">Indicates if the box should be created if it is not found.</param>
            <returns>The value at the specified key, or null if the existing box contains a different value type.</returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.Get(`0)">
            <summary>
            Get an untyped box (if it already exists)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.Set``1(`0,``0)">
            <summary>
            Adds the specified value to this container.
            </summary>
            <typeparam name="T">c</typeparam>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>The box containing the value at the specified key.</returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.Set(`0,System.Object,System.Type)">
            <summary>
            Adds the specified value to this container.
            </summary>
            <param name="key">The value.</param>
            <param name="value">The value.</param>
            <param name="type">The type of value to add.</param>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.GetEnumerator">
            <summary>
            Enumerate all the values in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.BoxedValueStore`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myre.Collections.CascadingBoxCollection">
            <summary>
            A INamedDataCollection with a parent. When getting a value the Get will search the parent if this object does not have the value.
            When setting the value it will be set in this instance, potentionally overriding the parent.
            </summary>
        </member>
        <member name="T:Myre.Collections.INamedDataCollection">
            <summary>
            
            </summary>
        </member>
        <member name="T:Myre.Collections.INamedDataConsumer">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.INamedDataConsumer.Set``1(Myre.TypedName{``0},``0)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Myre.Collections.INamedDataProvider">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.INamedDataProvider.GetValue``1(Myre.TypedName{``0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="useDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.INamedDataProvider.TryGetValue``1(Myre.TypedName{``0},``0@)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.#ctor(Myre.Collections.INamedDataProvider)">
            <summary>
            
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.Set``1(Myre.TypedName{``0},``0)">
            <summary>
            Set the value with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.GetValue``1(Myre.TypedName{``0},System.Boolean)">
            <summary>
            Get the value with the given name
            </summary>
            <typeparam name="T">Type of the value (inferred from the TypedName)</typeparam>
            <param name="name">The name and type of this value</param>
            <param name="useDefaultValue">Indicates if the default value should be used if no value can be found</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.TryGetValue``1(Myre.TypedName{``0},``0@)">
            <summary>
            Try to get a value with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.Get``1(Myre.TypedName{``0},``0,System.Boolean)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <param name="create"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.GetEnumerator">
            <summary>
            Enumerate all values in this collection
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.CascadingBoxCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Enumerate this collection
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myre.Collections.NamedBoxCollection">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.NamedBoxCollection.GetValue``1(Myre.TypedName{``0},System.Boolean)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="useDefaultValue"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.NamedBoxCollection.TryGetValue``1(Myre.TypedName{``0},``0@)">
            <summary>
            Try to get the value with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.NamedBoxCollection.Set``1(Myre.TypedName{``0},``0)">
            <summary>
            Set the value with the given name
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Myre.Collections.NamedBoxCollection.Add``1(Myre.TypedName{``0},``0)">
            <summary>
            Calls Set (key, value). This method allows you to use a collection initializer to initialize a NamedBoxCollection
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:Myre.Collections.ISettingsCollection">
            <summary>
            A collection of named values
            </summary>
        </member>
        <member name="M:Myre.Collections.ISettingsCollection.Add``1(System.String,System.String,``0)">
            <summary>
            Add a new setting to this collection
            </summary>
            <typeparam name="T">The type of the setting</typeparam>
            <param name="name">The name of this setting</param>
            <param name="description">A description of what this setting is</param>
            <param name="defaultValue">The default value to give this setting</param>
            <returns>A box, which holds the value of this setting</returns>
        </member>
        <member name="T:Myre.Collections.Octree">
            <summary>
            An 8-Way tree which allows nodes to be split
            </summary>
        </member>
        <member name="M:Myre.Collections.Octree.#ctor(Microsoft.Xna.Framework.BoundingBox,System.Func{Myre.Collections.Octree,Myre.Collections.Octree.Node,Microsoft.Xna.Framework.BoundingBox,Myre.Collections.Octree.Node})">
            <summary>
            Construct a new octree with a single root node covering the given bounds
            </summary>
            <param name="bounds"></param>
            <param name="childFactory"></param>
        </member>
        <member name="M:Myre.Collections.Octree.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if the root of the tree contains the given point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.Octree.NodesOverlappingBounds(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Get all nodes overlapping the bounds
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="P:Myre.Collections.Octree.Root">
            <summary>
            The root node of this Octree
            </summary>
        </member>
        <member name="E:Myre.Collections.Octree.NodeSplit">
            <summary>
            Triggered every time a node is split
            </summary>
        </member>
        <member name="E:Myre.Collections.Octree.NodeModified">
            <summary>
            Triggered every time a node is modified
            </summary>
        </member>
        <member name="T:Myre.Collections.Octree.Node">
            <summary>
            A node in an octree
            </summary>
        </member>
        <member name="M:Myre.Collections.Octree.Node.Contains(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Checks if this node contains this point
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.Octree.Node.Split">
            <summary>
            Split this node into 8 children. If this node is already split it will replace all the children with new children
            </summary>
        </member>
        <member name="M:Myre.Collections.Octree.Node.NodesOverlappingBounds(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Fetches all nodes (including non leaf nodes) which intersect the given bounds
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.Octree.Node.NotifyNodeModified">
            <summary>
            Called to indicates that this tree has been modified somehow
            </summary>
        </member>
        <member name="P:Myre.Collections.Octree.Node.Bounds">
            <summary>
            The bounds of this node
            </summary>
        </member>
        <member name="P:Myre.Collections.Octree.Node.Octree">
            <summary>
            The tree which contains this node
            </summary>
        </member>
        <member name="P:Myre.Collections.Octree.Node.Parent">
            <summary>
            The parent node of this node
            </summary>
        </member>
        <member name="P:Myre.Collections.Octree.Node.Children">
            <summary>
            All the children of this node, either 8 or 0
            </summary>
        </member>
        <member name="P:Myre.Collections.Octree.Node.IsSubdivided">
            <summary>
            Indicates if this node is subdivided (i.e. if it has any children)
            </summary>
        </member>
        <member name="T:Myre.Collections.ProximityOctreeDatabase`1">
            <summary>
            Allows efficient position/range queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Construct a new octree
            </summary>
            <param name="xSize">The size of the tree on the XAxis</param>
            <param name="ySize">The size of the tree on the YAxis</param>
            <param name="zSize">The size of the tree on the ZAxis</param>
            <param name="octreeSplitThreshold"></param>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.Insert(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Insert a new item at the given position
            </summary>
            <param name="position"></param>
            <param name="item"></param>
            <returns>A token which represents this item in the database</returns>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.ItemsInBounds(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Fetches all items in the given bounds
            </summary>
            <param name="box"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken">
            <summary>
            A token which represents an item with a position
            </summary>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="P:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken.Position">
            <summary>
            The position of the item
            </summary>
        </member>
        <member name="P:Myre.Collections.ProximityOctreeDatabase`1.ProximityToken.Item">
            <summary>
            The item
            </summary>
        </member>
        <member name="T:Myre.Collections.Pool`1">
            <summary>
            Maintains pool of class instances.
            </summary>
            <typeparam name="T"> The type of object to store. It must define a parameterless constructor</typeparam>
        </member>
        <member name="M:Myre.Collections.Pool`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.Pool`1"/> class.
            </summary>
        </member>
        <member name="M:Myre.Collections.Pool`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.Pool`1"/> class.
            </summary>
            <param name="initialCapacity">The initial number of elements contained within the <see cref="T:Myre.Collections.Pool`1"/>.</param>
        </member>
        <member name="M:Myre.Collections.Pool`1.Get">
            <summary>
            Gets an instance of <typeparamref name="T"/> from the <see cref="T:Myre.Collections.Pool`1"/>
            </summary>
            <returns>An instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:Myre.Collections.Pool`1.Return(`0)">
            <summary>
            Returns the specified item to the <see cref="T:Myre.Collections.Pool`1"/>.
            </summary>
            <param name="item">The item to be returned.</param>
        </member>
        <member name="P:Myre.Collections.Pool`1.Instance">
            <summary>
            Gets the static instance.
            </summary>
            <value>The instance.</value>
        </member>
        <member name="T:Myre.Collections.ReadOnlyDictionary`2">
            <summary>
            a readonly wrapper around an IDictionary object
            </summary>
            <typeparam name="Key">The type of the key.</typeparam>
            <typeparam name="Data">The type of the data.</typeparam>
        </member>
        <member name="M:Myre.Collections.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.ReadOnlyDictionary`2"/> class.
            </summary>
            <param name="source">The backing collection to query</param>
        </member>
        <member name="M:Myre.Collections.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the specified key is within the backing collection
            </summary>
            <param name="key">The key.</param>
            <returns>
            	<c>true</c> if the specified key is contained; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Myre.Collections.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Myre.Collections.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Myre.Collections.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the data assosciated with the specified key.
            </summary>
            <value></value>
        </member>
        <member name="P:Myre.Collections.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the count.
            </summary>
            <value>The count.</value>
        </member>
        <member name="P:Myre.Collections.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:Myre.Collections.ReadOnlyDictionary`2.Values">
            <summary>
            Gets the values.
            </summary>
            <value>The values.</value>
        </member>
        <member name="T:Myre.Collections.RingBuffer`1">
            <summary>
            Stores the N most recently added items
            </summary>
        </member>
        <member name="M:Myre.Collections.RingBuffer`1.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="size"></param>
        </member>
        <member name="M:Myre.Collections.RingBuffer`1.Add(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
        </member>
        <member name="P:Myre.Collections.RingBuffer`1.Count">
            <summary>
            Indicates the number of items added to the collection and currently stored
            </summary>
        </member>
        <member name="P:Myre.Collections.RingBuffer`1.Item(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="T:Myre.Collections.TokenOctree`1">
            <summary>
            An octree which allows inserting { Position, Object } tuples and supports efficient range queries
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.#ctor(Microsoft.Xna.Framework.BoundingBox,System.Int32)">
            <summary>
            Constructs a new TokenOctree
            </summary>
            <param name="bounds">the bounds of the root of this tree</param>
            <param name="splitThreshold">the number of tokens in a node which causes it to automatically split</param>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.Insert(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Insert a new token into the octree, possibly triggering Octree splitting
            </summary>
            <param name="position"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.Remove(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Remove a token from the octree
            </summary>
            <param name="position"></param>
            <param name="item"></param>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.ItemsInBounds(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Gets all the items in the given bounding box
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Collections.TokenOctree`1.TokenNode">
            <summary>
            An entry in a token octree
            </summary>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.TokenNode.#ctor(Myre.Collections.Octree,Myre.Collections.TokenOctree{`0}.TokenNode,Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Construct a new node
            </summary>
            <param name="tree"></param>
            <param name="parent"></param>
            <param name="bounds"></param>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.TokenNode.Split">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.TokenNode.Insert(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Insert a token into this node
            </summary>
            <param name="position"></param>
            <param name="item"></param>
            <returns>The node the token was inserted into (if it was inserted into this/a child node) or null if the token was not inserted</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.TokenNode.Remove(Microsoft.Xna.Framework.Vector3,`0)">
            <summary>
            Try to remove an item at the given position from the tree
            </summary>
            <param name="position"></param>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Collections.TokenOctree`1.TokenNode.ItemsInBounds(Microsoft.Xna.Framework.BoundingBox)">
            <summary>
            Gets all the items in the given bounding box
            </summary>
            <param name="bounds"></param>
            <returns></returns>
        </member>
        <member name="P:Myre.Collections.TokenOctree`1.TokenNode.Children">
            <summary>
            Gets the children of this node (if any)
            </summary>
        </member>
        <member name="P:Myre.Collections.TokenOctree`1.TokenNode.Octree">
            <summary>
            Gets the tree which contains this node
            </summary>
        </member>
        <member name="T:Myre.Collections.TypedWeakReference`1">
            <summary>
            A weak reference to a an object of a specific type. The item may still be garbage collected even while a weak reference is held.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Myre.Collections.TypedWeakReference`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.TypedWeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
        </member>
        <member name="M:Myre.Collections.TypedWeakReference`1.#ctor(`0,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Collections.TypedWeakReference`1"/> class.
            </summary>
            <param name="target">The target.</param>
            <param name="trackResurrection">if set to <c>true</c> the object referenced by this weak reference is tracked after finalisation.</param>
        </member>
        <member name="P:Myre.Collections.TypedWeakReference`1.IsAlive">
            <summary>
            Gets a value indicating whether this instance is alive.
            </summary>
            <value><c>true</c> if this instance is alive; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Myre.Collections.TypedWeakReference`1.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:Myre.Collections.TypedWeakReference`1.TrackResurrection">
            <summary>
            Gets a value indicating whether the object referenced by this weak reference is tracked after finalisation.
            </summary>
            <value><c>true</c> if the object referenced by this weak reference is tracked after finalisation; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Myre.Extensions.ArrayExtensions">
            <summary>
            Extensions to arrays
            </summary>
        </member>
        <member name="M:Myre.Extensions.ArrayExtensions.Rotate``1(``0[],System.Int32)">
            <summary>
            In place rotate the elements in the given array by a certain amount (wrapping around the end)
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.ArrayExtensions.CopyTo``1(System.ArraySegment{``0},System.ArraySegment{``0})">
            <summary>
            Copies a segment of one array to an equal length segment of another array
            </summary>
            <typeparam name="T"></typeparam>
            <param name="source"></param>
            <param name="destination"></param>
        </member>
        <member name="T:Myre.Extensions.PlaneExtensions">
            <summary>
            Extensions to the XNA plane structure
            </summary>
        </member>
        <member name="M:Myre.Extensions.PlaneExtensions.ClosestPoint(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Projects the given point onto the plane
            </summary>
            <param name="plane"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.PlaneExtensions.Distance(Microsoft.Xna.Framework.Plane,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Gets the distance from the plane to the point.
            </summary>
            <param name="plane"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Int4">
            <summary>
            An integer location in 4space
            </summary>
        </member>
        <member name="F:Myre.Int4.W">
            <summary>
            W Position
            </summary>
        </member>
        <member name="F:Myre.Int4.X">
            <summary>
            X Position
            </summary>
        </member>
        <member name="F:Myre.Int4.Y">
            <summary>
            Y Positions
            </summary>
        </member>
        <member name="F:Myre.Int4.Z">
            <summary>
            Z Position
            </summary>
        </member>
        <member name="M:Myre.Int4.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new point in 3D integer space
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
            <param name="w"></param>
        </member>
        <member name="M:Myre.Int4.ToVector4">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.Equals(Myre.Int4)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.op_Addition(Myre.Int4,Myre.Int4)">
            <summary>
            Add together the members of two Int3s
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.op_Subtraction(Myre.Int4,Myre.Int4)">
            <summary>
            Subtract the members of one Int3 off another
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.op_Equality(Myre.Int4,Myre.Int4)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int4.op_Inequality(Myre.Int4,Myre.Int4)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Delayed">
            <summary>
            A static class containing methods for fire-and-forget delayed events and transitions.
            </summary>
        </member>
        <member name="M:Myre.Delayed.Action(System.Action,System.Single)">
            <summary>
            Fires the spevified action after the specified number of seconds have elapsed.
            </summary>
            <param name="action">The delegate to execute.</param>
            <param name="delay">The delay before the action is executed.</param>
        </member>
        <member name="M:Myre.Delayed.Transition(System.Action{System.Single},System.Single,System.Action)">
            <summary>
            Calls the specified delegate every frame for the specified number of seconds, and then calls the specified callback delegate.
            </summary>
            <param name="step">The method to call each frame. This method takes on float parameter which is the progress from 0 to 1.</param>
            <param name="completionCallback">The method to call on completion of the transition.</param>
            <param name="duration">The number of seconds to call the delegate for.</param>
        </member>
        <member name="M:Myre.Delayed.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Updates all transitions. This is called by MyreGame.Update(gameTime).
            </summary>
            <param name="gameTime"></param>
        </member>
        <member name="T:Myre.Extensions.BoundingBoxExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.BoundingBox struct.
            </summary>
        </member>
        <member name="M:Myre.Extensions.BoundingBoxExtensions.Transform(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Transformes the <see cref="T:Microsoft.Xna.Framework.BoundingBox"/> with a specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="box">The rectangle to transform.</param>
            <param name="m">The matrix with which to do the transformation.</param>
            <returns>The transformed <see cref="T:Microsoft.Xna.Framework.BoundingBox"/>.</returns>
        </member>
        <member name="M:Myre.Extensions.BoundingBoxExtensions.ClosestPoint(Microsoft.Xna.Framework.BoundingBox,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Finds the closest point on a bounding box from another point
            </summary>
            <param name="box"></param>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.BoundingSphereExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.BoundingSphere struct.
            </summary>
        </member>
        <member name="M:Myre.Extensions.BoundingSphereExtensions.Transform(Microsoft.Xna.Framework.BoundingSphere,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Transformes the <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/> with a specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="sphere">The rectangle to transform.</param>
            <param name="m">The matrix with which to do the transformation.</param>
            <returns>The transformed <see cref="T:Microsoft.Xna.Framework.BoundingSphere"/>.</returns>
        </member>
        <member name="T:Myre.Extensions.ColorExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.Graphics.Color struct.
            </summary>
        </member>
        <member name="M:Myre.Extensions.ColorExtensions.Multiply(Microsoft.Xna.Framework.Color,Microsoft.Xna.Framework.Color)">
            <summary>
            Multiplies the the specified <see cref="T:Microsoft.Xna.Framework.Color"/> with this <see cref="T:Microsoft.Xna.Framework.Color"/>.
            </summary>
            <param name="a">A.</param>
            <param name="colour">The colour.</param>
            <returns>This <see cref="T:Microsoft.Xna.Framework.Color"/> multiplied with the specified <see cref="T:Microsoft.Xna.Framework.Color"/>.</returns>
        </member>
        <member name="M:Myre.Extensions.ColorExtensions.ToColour(System.String,Microsoft.Xna.Framework.Color@)">
            <summary>
            Parses this string into a Color.
            </summary>
            <param name="value"></param>
            <param name="colour">The parsed colour.</param>
            <returns>White if not found, the value otherwise</returns>
        </member>
        <member name="M:Myre.Extensions.ColorExtensions.FromRgb(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns>Null if not found, the value otherwise</returns>
        </member>
        <member name="M:Myre.Extensions.ColorExtensions.FromArgb(System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns>Null if not found, the value otherwise</returns>
        </member>
        <member name="T:Myre.Extensions.INamedDataCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.INamedDataCollectionExtensions.GetMaybeValue``1(Myre.Collections.INamedDataCollection,Myre.TypedName{``0})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="name"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.QuaternionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.IsNaN(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Checks if any member of the given quaternion is NaN
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Lerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Linearly interpolate from A to B
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Slerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Spherical linear interpolator from a to b. Shortest path/constant velocity
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Nlerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion,System.Single)">
            <summary>
            Normalizing lerp from a to b, shortest path/non constant velocity
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Nlerp(Microsoft.Xna.Framework.Quaternion,Microsoft.Xna.Framework.Quaternion@,System.Single,Microsoft.Xna.Framework.Quaternion@)">
            <summary>
            Normalizing lerp from a to b, shortest path/non constant velocity
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="t"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Forward(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Get the forward direction vector from this quaternion
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.QuaternionExtensions.Up(Microsoft.Xna.Framework.Quaternion)">
            <summary>
            Get the up vector from this quaternion
            </summary>
            <param name="a"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.RandomExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.RandomExtensions.RandomNormalVector(System.Random)">
            <summary>
            
            </summary>
            <param name="random"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.Vector3Extensions">
            <summary>
            A static class which contains extension methods for the Vector2 class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.IsNaN(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines whether this Vector3 contains any components which are not a number.
            </summary>
            <param name="v"></param>
            <returns>
            	<c>true</c> if either X or Y or Z are NaN; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.ManhattanLength(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Determines the length of a vector using the manhattan length function
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.LargestElement(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Returns the largest element in the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.ToInt3(Microsoft.Xna.Framework.Vector3)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.CatmullRom(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,System.Single)">
            <summary>
            Performs CatmullRom spline interpolation between vectors
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="d"></param>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.Clamp(Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3,Microsoft.Xna.Framework.Vector3)">
            <summary>
            Clamps each element within the ranges of equivalwnt elements from min and max
            </summary>
            <param name="point"></param>
            <param name="min"></param>
            <param name="max"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.XX(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.XY(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.XZ(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.YX(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.YY(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.YZ(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.ZX(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.ZY(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector3Extensions.ZZ(Microsoft.Xna.Framework.Vector3)">
            <summary>
            Get a vector 2 with the specified elements
            </summary>
            <param name="point"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.GameTimeExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.GameTime class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.GameTimeExtensions.Seconds(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Gets the number of seconds elapsed since the last frame.
            </summary>
            <param name="t">The t.</param>
            <returns>The number of seconds elapsed since the last frame.</returns>
        </member>
        <member name="M:Myre.Extensions.GameTimeExtensions.TotalSeconds(Microsoft.Xna.Framework.GameTime)">
            <summary>
            Gets the total number of seconds elapsed since the game started.
            </summary>
            <param name="t">The t.</param>
            <returns>The total number of seconds elapsed since the game started.</returns>
        </member>
        <member name="T:Myre.Extensions.GraphicsDeviceExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.Graphics.GraphicsDevice class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.GraphicsDeviceExtensions.CalculateHalfPixel(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Calculates half the size of a pixel.
            </summary>
            <returns>Half the size of a pixel</returns>
        </member>
        <member name="M:Myre.Extensions.GraphicsDeviceExtensions.GetResolution(Microsoft.Xna.Framework.Graphics.GraphicsDevice)">
            <summary>
            Gets the resolution of the currently set render target or back buffer.
            </summary>
            <returns>The resolution of the currently set render target or back buffer.</returns>
        </member>
        <member name="M:Myre.Extensions.GraphicsDeviceExtensions.ClearDepth(Microsoft.Xna.Framework.Graphics.GraphicsDevice,System.Int32)">
            <summary>
            Clears the depth buffer.
            </summary>
            <param name="device">The graphics device to clear.</param>
            <param name="depth">The depth to clear the depth buffer to.</param>
        </member>
        <member name="T:Myre.Extensions.IDictionaryExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1},System.Func{``0,``1,``1})">
            <summary>
            
            </summary>
            <param name="dictionary"></param>
            <param name="key"></param>
            <param name="add"></param>
            <param name="update"></param>
            <typeparam name="K"></typeparam>
            <typeparam name="V"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.IEnumerableExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each item in the collection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="action">The action.</param>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.Flatten``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Returns each item in a collection of collections
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.FirstOrDefaultValue``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Returns the first value in the collection, or the given default
            </summary>
            <typeparam name="T"></typeparam>
            <param name="collection">The collection.</param>
            <param name="defaultValue">The default value.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            enumerates the start and then the end
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            enumerates the start then the end
            </summary>
            <param name="end"></param>
            <param name="start"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.Append``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Appends the given items onto this enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Prepends the given items onto this enumeration
            </summary>
            <typeparam name="T"></typeparam>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.ZipWithIndex``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Returns every element in the sequence with it's index in the sequence
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerable">The enumerable.</param>
            <param name="startIndex">The start index.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.IEnumerableExtensions.DropLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Drop the last N items from a collection
            </summary>
            <param name="enumerable"></param>
            <param name="drop"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Myre.Extensions.IEnumeratorExtensions">
            <summary>
            A static class containing extension methods for the IEnumberable interface.
            </summary>
        </member>
        <member name="M:Myre.Extensions.IEnumeratorExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <summary>
            Converts this IEnumberator into an IEnumberable.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumerator">The enumerator.</param>
            <returns>An IEnumerable which iterates over this IEnumerator.</returns>
        </member>
        <member name="T:Myre.Extensions.IListExtensions">
            <summary>
            A static class containing extension methods for the System.Collections.IList interface.
            </summary>
        </member>
        <member name="M:Myre.Extensions.IListExtensions.InsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Sorts the list using insertion sort. This is usually slower than List.Sort and Array.Sort, but is stable.
            Worst case O(n^2).
            Best case O(n) (already sorted list).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="comparison">The comparison.</param>
        </member>
        <member name="M:Myre.Extensions.IListExtensions.InsertionSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the list using insertion sort. This is usually slower than List.Sort and Array.Sort, but is stable.
            Worst case O(n^2).
            Best case O(n) (already sorted list).
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list">The list.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Myre.Extensions.IListExtensions.RemoveAll``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Remove all elements in the list which match the given predicate
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="predicate"></param>
        </member>
        <member name="M:Myre.Extensions.IListExtensions.FindIndex``1(System.Collections.Generic.IList{``0},System.Predicate{``0})">
            <summary>
            Find the first item which the given predicate matches
            </summary>
            <param name="list"></param>
            <param name="predicate"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.Int32Extensions">
            <summary>
            A static class containing extensions for the System.Int32 struct.
            </summary>
        </member>
        <member name="M:Myre.Extensions.Int32Extensions.ContainsBits(System.Int32,System.Int32)">
            <summary>
            Determines if this Int32 has all the bits set to true as there are in
            the specified Int32.
            </summary>
        </member>
        <member name="M:Myre.Extensions.Int32Extensions.IsBitSet(System.Int32,System.Int32)">
            <summary>
            Determines if the specified bit is set to true in this Int32.
            </summary>
            <param name="n"></param>
            <param name="bit">The index of the bit, zero indicates the least significant bit</param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.KeysExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:Myre.Extensions.KeysExtensions.IsCharacterKey(Microsoft.Xna.Framework.Input.Keys)">
            <summary>
            Determines if this key is used in basic character entry.
            Includes a-z, 0-9 and arrow keys, among others.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.RectangleExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.Rectangle struct.
            </summary>
        </member>
        <member name="M:Myre.Extensions.RectangleExtensions.Transform(Microsoft.Xna.Framework.Rectangle,Microsoft.Xna.Framework.Matrix@)">
            <summary>
            Transforms the <see cref="T:Microsoft.Xna.Framework.Rectangle"/> with a specified <see cref="T:Microsoft.Xna.Framework.Matrix"/>.
            </summary>
            <param name="rect">The rectangle to transform.</param>
            <param name="m">The matrix with which to do the transformation.</param>
            <returns>The transformed rectangle.</returns>
        </member>
        <member name="T:Myre.Extensions.StringBuilderExtensions">
            <summary>
            A static class containing extension methods for the System.Text.StringBuilder class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.StringBuilderExtensions.Clear(System.Text.StringBuilder)">
            <summary>
            Clears this instance.
            </summary>
            <param name="sb"></param>
        </member>
        <member name="M:Myre.Extensions.StringBuilderExtensions.Append(System.Text.StringBuilder,System.Text.StringBuilder)">
            <summary>
            Appends the specified stringbuilder onto this instance.
            </summary>
            <param name="sb">The sb.</param>
            <param name="stringBuilder">The string builder.</param>
        </member>
        <member name="M:Myre.Extensions.StringBuilderExtensions.Append(System.Text.StringBuilder,System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            Appends the specified stringbuilder onto this instance.
            </summary>
            <param name="sb">The sb.</param>
            <param name="stringBuilder">The string builder.</param>
            <param name="start">The start index at which to copying.</param>
            <param name="length">The number of characters to append..</param>
        </member>
        <member name="T:Myre.Extensions.StringExtensions">
            <summary>
            A static class containing extension methods for the System.String class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.TryToByte(System.String,System.Byte@)">
            <summary>
            Tries to convert this string into a byte.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="result">The parsed byte.</param>
            <returns><c>true</c> if the parse succeeded; else <c>false</c>.</returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.TryToInt(System.String,System.Int32@)">
            <summary>
            Tries to convert this string into an int.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="result">The parsed int.</param>
            <returns><c>true</c> if the parse succeeded; else <c>false</c>.</returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.TryToBool(System.String,System.Boolean@)">
            <summary>
            Tries to convert this string into a bool.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="result">The parsed bool.</param>
            <returns><c>true</c> if the parse succeeded; else <c>false</c>.</returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.TryToFloat(System.String,System.Single@)">
            <summary>
            Tries to convert this string into a float.
            </summary>
            <param name="value">The string to convert.</param>
            <param name="result">The parsed float.</param>
            <returns><c>true</c> if the parse succeeded; else <c>false</c>.</returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.SplitKeepDelimiters(System.String,System.Char[])">
            <summary>
            Splits this string, while keeping delimiters.
            </summary>
            <param name="s"></param>
            <param name="delimiters">The delimiters around which to split.</param>
            <returns>A list of the split string parts.</returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.EndsWith(System.String,System.Char)">
            <summary>
            Checks if the given string ends with the given character
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Checks if the given string ends with the given character
            </summary>
            <param name="s"></param>
            <param name="c"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.StringExtensions.Format(System.String,System.Object[])">
            <summary>
            
            </summary>
            <param name="format"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.SurfaceFormatExtensions">
            <summary>
            A static class containing extension methods for the Microsoft.Xna.Framework.Graphics.SurfaceFormat enum.
            </summary>
        </member>
        <member name="M:Myre.Extensions.SurfaceFormatExtensions.IsFloatingPoint(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Determines whether the specified format is floating point.
            </summary>
            <param name="format">The format.</param>
            <returns>
            	<c>true</c> if the specified format is floating point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Myre.Extensions.SurfaceFormatExtensions.FormatSize(Microsoft.Xna.Framework.Graphics.SurfaceFormat)">
            <summary>
            Gets the byte size of a render target format
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.SurfaceFormatExtensions.FormatSize(Microsoft.Xna.Framework.Graphics.DepthFormat)">
            <summary>
            Gets the byte size of a render target format
            </summary>
            <param name="format">The format.</param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.TypeExtensions">
            <summary>
            A static class containing extensions methods for the System.Type class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.TypeExtensions.FindAttribute``1(System.Type)">
            <summary>
            Searches the Type for the specified attribute, and returns the first instance it finds; else returns null.
            </summary>
            <typeparam name="T">The type of attribute to search for.</typeparam>
            <param name="type">The type within which to search.</param>
            <returns>The first instance of the attribute found; else null.</returns>
        </member>
        <member name="M:Myre.Extensions.TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="type">The type.</param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.TypeExtensions.CreateInstance(System.Type,System.Type[],System.Object[])">
            <summary>
            Creates an instance of this type.
            </summary>
            <param name="type">The type.</param>
            <param name="parameterTypes"></param>
            <param name="parameters">The parameters.</param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.TypeExtensions.Parse(System.Type,System.String)">
            <summary>
            Attempts to parse the given string with the default static Parse method for the given type
            </summary>
            <param name="t"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.TypeExtensions.GetImplementedTypes(System.Type)">
            <summary>
            Get all types this type derives from
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Extensions.Vector2Extensions">
            <summary>
            A static class which contains extension methods for the Vector2 class.
            </summary>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.IsNaN(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines whether this Vector2 contains any components which are not a number.
            </summary>
            <param name="v"></param>
            <returns>
            	<c>true</c> if either X or Y are NaN; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.Perpendicular(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Creates a vector perpendicular to this vector.
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.Cross(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>
            Calculates the perpendicular dot product of this vector and another.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.ManhattanLength(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Determines the length of a vector using the manhattan length function
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.LargestElement(Microsoft.Xna.Framework.Vector2)">
            <summary>
            Returns the largest element in the vector
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.Area(Microsoft.Xna.Framework.Vector2[])">
            <summary>
            Calculates the area of an irregular polygon. If the polygon is anticlockwise wound the area will be negative
            </summary>
            <param name="v"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Extensions.Vector2Extensions.IsConvex(Microsoft.Xna.Framework.Vector2[],System.Single)">
            <summary>
            
            </summary>
            <param name="v"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.ICopyable">
            <summary>
            An object which can create copies of itself.
            </summary>
            <remarks>This is a replacement for the ICloneable interface, which does not exist in silverlight.</remarks>
        </member>
        <member name="M:Myre.ICopyable.Copy">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:Myre.Int3">
            <summary>
            An integer location in 3space
            </summary>
        </member>
        <member name="F:Myre.Int3.X">
            <summary>
            X Position
            </summary>
        </member>
        <member name="F:Myre.Int3.Y">
            <summary>
            Y Positions
            </summary>
        </member>
        <member name="F:Myre.Int3.Z">
            <summary>
            Z Position
            </summary>
        </member>
        <member name="M:Myre.Int3.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new point in 3D integer space
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="z"></param>
        </member>
        <member name="M:Myre.Int3.ToVector3">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.Equals(Myre.Int3)">
            <summary>
            
            </summary>
            <param name="other"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.op_Addition(Myre.Int3,Myre.Int3)">
            <summary>
            Add together the members of two Int3s
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.op_Subtraction(Myre.Int3,Myre.Int3)">
            <summary>
            Subtract the members of one Int3 off another
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.op_Equality(Myre.Int3,Myre.Int3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.Int3.op_Inequality(Myre.Int3,Myre.Int3)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.Interpolation">
            <summary>
            Various interpolation functions, courtesy of Rob Penner http://www.robertpenner.com/easing/
            </summary>
        </member>
        <member name="M:Myre.Interpolation.Linear(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a simple linear tweening, with no easing.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ExpoEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an exponential (2^t) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ExpoEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an exponential (2^t) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ExpoEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an exponential (2^t) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ExpoEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an exponential (2^t) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CircEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a circular (sqrt(1-t^2)) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CircEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a circular (sqrt(1-t^2)) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CircEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a circular (sqrt(1-t^2)) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CircEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a circular (sqrt(1-t^2)) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuadEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quadratic (t^2) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuadEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quadratic (t^2) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuadEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quadratic (t^2) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuadEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quadratic (t^2) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.SineEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a sinusoidal (sin(t)) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.SineEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a sinusoidal (sin(t)) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.SineEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a sinusoidal (sin(t)) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.SineEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a sinusoidal (sin(t)) easing in/out: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CubicEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a cubic (t^3) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CubicEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a cubic (t^3) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CubicEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a cubic (t^3) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.CubicEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a cubic (t^3) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuartEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quartic (t^4) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuartEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quartic (t^4) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuartEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quartic (t^4) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuartEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quartic (t^4) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuintEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quintic (t^5) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuintEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quintic (t^5) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuintEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quintic (t^5) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.QuintEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a quintic (t^5) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ElasticEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an elastic (exponentially decaying sine wave) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ElasticEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an elastic (exponentially decaying sine wave) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ElasticEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an elastic (exponentially decaying sine wave) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.ElasticEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for an elastic (exponentially decaying sine wave) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BounceEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BounceEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BounceEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BounceEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a bounce (exponentially decaying parabolic bounce) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BackEaseOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out: 
            decelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BackEaseIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in: 
            accelerating from zero velocity.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BackEaseInOut(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing in/out: 
            acceleration until halfway, then deceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="M:Myre.Interpolation.BackEaseOutIn(System.Single,System.Single,System.Single)">
            <summary>
            Easing equation function for a back (overshooting cubic easing: (s+1)*t^3 - s*t^2) easing out/in: 
            deceleration until halfway, then acceleration.
            </summary>
            <param name="b">Starting value.</param>
            <param name="c">Final value.</param>
            <param name="d">Duration of animation.</param>
            <returns>A function which returns the correct value.</returns>
        </member>
        <member name="T:Myre.IRecycleable">
            <summary>
            An object which can have its instances recycled, or reset.
            </summary>
        </member>
        <member name="M:Myre.IRecycleable.Recycle">
            <summary>
            Prepares this instance for re-use.
            </summary>
        </member>
        <member name="T:Myre.PulserType">
            <summary>
            Specifies the type of timing a pulser uses.
            </summary>
        </member>
        <member name="F:Myre.PulserType.Simple">
            <summary>
            If more time has elapsed than the threshold since the last pulse, then the pulser pulses and then resets the timer.
            </summary>
        </member>
        <member name="F:Myre.PulserType.Reliable">
            <summary>
            The pulser will ensure that it pulses the correct number of times in a particular time interval.
            e.g. If the pulser has a frequency of 30Hz, and it is not updated for 0.5 seconds, then its next update will pulse 15 times.
            </summary>
        </member>
        <member name="F:Myre.PulserType.SquareWave">
            <summary>
            Same as reliable, except that the pulser toggles between on and off at each 'pulse'.
            </summary>
        </member>
        <member name="T:Myre.Pulser">
            <summary>
            A class which implements a repeated timed event.
            </summary>
        </member>
        <member name="M:Myre.Pulser.#ctor(Myre.PulserType,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Pulser"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="frequency">The frequency.</param>
        </member>
        <member name="M:Myre.Pulser.#ctor(Myre.PulserType,System.TimeSpan,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Myre.Pulser"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="frequency">The frequency. This is the rate at which this instances pulses, after Delay has passed.</param>
            <param name="delay">The delay. This is the time after the pulsor is started or restarted, before it begins pulsing.</param>
            <param name="initialState">if set to <c>true</c> IsSignalled will initially be <c>true</c>.</param>
        </member>
        <member name="M:Myre.Pulser.Restart(System.Boolean,System.Boolean)">
            <summary>
            Restarts this pulser.
            </summary>
            <param name="initialState">if set to <c>true</c> IsSignalled will initially be <c>true</c>.</param>
            <param name="resetDelay">if set to <c>true</c> the pulser will wait for the delay again before starting.</param>
        </member>
        <member name="M:Myre.Pulser.Update">
            <summary>
            Updates this instance.
            </summary>
        </member>
        <member name="P:Myre.Pulser.PulserType">
            <summary>
            Gets or sets the type of the pulser.
            </summary>
            <value>The type of the pulser.</value>
        </member>
        <member name="P:Myre.Pulser.Frequency">
            <summary>
            Gets or sets the frequency.
            This is the rate at which this instances pulses, after Delay has passed.
            </summary>
            <value>The frequency.</value>
        </member>
        <member name="P:Myre.Pulser.Delay">
            <summary>
            Gets or sets the delay.
            This is the time after the pulser is started or restarted, before it begins pulsing.
            </summary>
            <value>The delay.</value>
        </member>
        <member name="P:Myre.Pulser.IsSignalled">
            <summary>
            Gets or sets a value indicating whether this instance is signalled.
            </summary>
            <value>
            	<c>true</c> if this instance is signalled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="E:Myre.Pulser.Signalled">
            <summary>
            Occurs when the pulser is triggered.
            </summary>
        </member>
        <member name="T:Myre.RotatedBoundingBox">
            <summary>
            A bounding box which is not necessarily axis aligned
            </summary>
        </member>
        <member name="F:Myre.RotatedBoundingBox.Bounds">
            <summary>
            The bounds of this box
            </summary>
        </member>
        <member name="P:Myre.RotatedBoundingBox.Rotation">
            <summary>
            The rotation from world into box local space
            </summary>
        </member>
        <member name="P:Myre.RotatedBoundingBox.InverseRotation">
            <summary>
            The rotation from box local space to world space
            </summary>
        </member>
        <member name="T:Myre.StaticRandom">
            <summary>
            Generates random numbers
            </summary>
        </member>
        <member name="M:Myre.StaticRandom.Random(System.UInt32,System.UInt32)">
            <summary>
            Creates a random number from the specified seed
            </summary>
            <param name="seed">The seed value</param>
            <param name="upperBound">The maximum value (exclusive)</param>
            <returns></returns>
        </member>
        <member name="M:Myre.StaticRandom.Random(System.UInt32)">
            <summary>
            Creates a random number, using the time as a seed
            </summary>
            <param name="upperBound">The maximum value (exclusive)</param>
            <returns></returns>
        </member>
        <member name="T:Myre.TypedName`1">
            <summary>
            A string with an associated generic type parameter
            </summary>
            <remarks>
            This may seem a little odd as the type parameter is not used. This type exists so that you can store a TypedName&lt;T&gt; somewhere and unambiguously refer to a box or property. The type parameter really exists for compiler inferencing
            </remarks>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:Myre.TypedName`1.Name">
            <summary>
            The name
            </summary>
        </member>
        <member name="M:Myre.TypedName`1.#ctor(System.String)">
            <summary>
            Construct a new TypedName
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:Myre.TypedName`1.op_Addition(Myre.TypedName{`0},System.String)">
            <summary>
            Append a string to the name of a TypedName
            </summary>
            <param name="a"></param>
            <param name="b">the string to append, if this is null or empty nothing will happen</param>
            <returns></returns>
        </member>
        <member name="M:Myre.TypedName`1.op_Explicit(Myre.TypedName{`0})~System.String">
            <summary>
            Explicitly cast this name into a string
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Myre.TypedName`1.op_Explicit(System.String)~Myre.TypedName{`0}">
            <summary>
            Explicitly cast a string into a typed name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Myre.SingleUIntUnion">
            <summary>
            Provides a safe way of bitwise converting a Single to a Uint32
            </summary>
        </member>
        <member name="F:Myre.SingleUIntUnion.SingleValue">
            <summary>
            The value of this union, interpreted as a single
            </summary>
        </member>
        <member name="F:Myre.SingleUIntUnion.UIntValue">
            <summary>
            The value of this union, interpreted as a uint
            </summary>
        </member>
        <member name="T:Myre.SingleIntUnion">
            <summary>
            Provides a safe way of bitwise converting a Single to a Uint32
            </summary>
        </member>
        <member name="F:Myre.SingleIntUnion.SingleValue">
            <summary>
            The value of this union, interpreted as a single
            </summary>
        </member>
        <member name="F:Myre.SingleIntUnion.IntValue">
            <summary>
            The value of this union, interpreted as a uint
            </summary>
        </member>
        <member name="T:Myre.DoubleULongUnion">
            <summary>
            Provides a safe way of bitwise converting a Double to a ULong
            </summary>
        </member>
        <member name="F:Myre.DoubleULongUnion.DoubleValue">
            <summary>
            The value of this union, interpreted as a double
            </summary>
        </member>
        <member name="F:Myre.DoubleULongUnion.ULongValue">
            <summary>
            The value of this union, interpreted as a ulong
            </summary>
        </member>
        <member name="T:Myre.LongULongUnion">
            <summary>
            Provides a safe way of bitwise converting a Long to a ULong
            </summary>
        </member>
        <member name="F:Myre.LongULongUnion.LongValue">
            <summary>
            The value of this union, interpreted as a long
            </summary>
        </member>
        <member name="F:Myre.LongULongUnion.ULongValue">
            <summary>
            The value of this union, interpreted as a ulong
            </summary>
        </member>
        <member name="T:Myre.IntUIntUnion">
            <summary>
            Provides a safe way of converting an Int32 to a UInt32
            </summary>
        </member>
        <member name="F:Myre.IntUIntUnion.IntValue">
            <summary>
            The value of this union, interpreted as a int
            </summary>
        </member>
        <member name="F:Myre.IntUIntUnion.UIntValue">
            <summary>
            The value of this union, interpreted as a uint
            </summary>
        </member>
        <member name="T:Myre.ByteSbyteUnion">
            <summary>
            Provides a safe way of converting a byte to an sbyte
            </summary>
        </member>
        <member name="F:Myre.ByteSbyteUnion.SbyteValue">
            <summary>
            The value of this union, interpreted as a sbyte
            </summary>
        </member>
        <member name="F:Myre.ByteSbyteUnion.ByteValue">
            <summary>
            The value of this union, interpreted as a byte
            </summary>
        </member>
        <member name="T:Myre.DecimalUlong2Union">
            <summary>
            Provides a safe way of converting an decimal to 2 ulongs
            </summary>
        </member>
        <member name="F:Myre.DecimalUlong2Union.DecimalValue">
            <summary>
            The value of this union, interpreted as a decimal
            </summary>
        </member>
        <member name="F:Myre.DecimalUlong2Union.UlongValue1">
            <summary>
            The value of the first 64 bits of this union, interpreted as a ulong
            </summary>
        </member>
        <member name="F:Myre.DecimalUlong2Union.UlongValue2">
            <summary>
            The value of the last 64 bits of this union, interpreted as a ulong
            </summary>
        </member>
        <member name="T:Myre.IntShort2Union">
            <summary>
            Provides a safe way to convert an int32 to 2 shorts
            </summary>
        </member>
        <member name="F:Myre.IntShort2Union.IntValue">
            <summary>
            The value of this union, interpreted as a int
            </summary>
        </member>
        <member name="F:Myre.IntShort2Union.ShortValue1">
            <summary>
            The value of the first 16 bits of this union, interpreted as a short
            </summary>
        </member>
        <member name="F:Myre.IntShort2Union.ShortValue2">
            <summary>
            The value of the last 16 bits of this union, interpreted as a short
            </summary>
        </member>
        <member name="T:Myre.IntByte4Union">
            <summary>
            Provides a safe way to convert an int32 to 4 bytes
            </summary>
        </member>
        <member name="F:Myre.IntByte4Union.IntValue">
            <summary>
            The value of this union, interpreted as a int
            </summary>
        </member>
        <member name="F:Myre.IntByte4Union.ByteValue1">
            <summary>
            The first 8 bits of this union
            </summary>
        </member>
        <member name="F:Myre.IntByte4Union.ByteValue2">
            <summary>
            The second 8 bits of this union
            </summary>
        </member>
        <member name="F:Myre.IntByte4Union.ByteValue3">
            <summary>
            The third 8 bits of this union
            </summary>
        </member>
        <member name="F:Myre.IntByte4Union.ByteValue4">
            <summary>
            The fourth 8 bits of this union
            </summary>
        </member>
    </members>
</doc>
